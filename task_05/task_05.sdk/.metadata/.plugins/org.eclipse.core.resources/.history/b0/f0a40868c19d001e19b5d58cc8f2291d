#ifndef __MAIN_H__
#define __MAIN_H__

#include "blocks.h"

#define VGA_CTRL_BASE 0x44A00000


typedef struct bola {
	int x, y, mov;
}bola_t;

typedef enum side {top, bottom, right, left,
					 top_left, top_right, bottom_left, bottom_right,
					 not_border} side_t;

 typedef enum movement {mov_top_right, mov_bottom_right, mov_bottom_left, mov_top_left} movement_t;
/*struct frames {
	int ini_x, ini_y;
	int fin_x, fin_y;
};*/

#define A {0x00, 0x00, 0xf0}
#define C {0x00, 0x80, 0x00}
#define D {0x00, 0xf0, 0x00}
#define E {0xf0, 0xf0, 0x00}
#define F {0xf0, 0x00, 0x00}
#define W {0xff, 0xff, 0xff}
#define G {0xc2, 0x99, 0x27}
#define B {0xb4, 0xe2, 0xf4}
#define N {0x00, 0x00, 0x00}

#define INT_X_BORDER		1
#define END_X_BORDER		158
#define INT_Y_BORDER		1
#define END_Y_BORDER		118
#define BORDER_THICKNESS	1

color_t negro = N;
color_t blanco = W;
color_t azul = A;
color_t azul_claro = B;
color_t verde = C;
color_t verde_oscuro = D;
color_t amarillo = E;
color_t rojo = F;
color_t gold = G;

color_t nave[11][2]={
		{G,G,G,G,G,G,G,G,G,G,G},
		{G,G,G,G,G,G,G,G,G,G,G}
};

// Función que pinta un pixel en pantalla
// X entre 0 y 159, Y entre 0 y 119,
// R/G/B: colores - entre 0 y 255 (los cuatro bits menos significativos se ignoran)
void pinta(int x, int y, color_t rgb);

// Función que retorna el valor de un pixel en pantalla
color_t pixel(int x, int y);

// Función que pinta un rectángulo de un color
// Pos: esquina superior izquierda del rectangulo
// Color: color del rectángulo
// W: anchura, H: altura
void rect (position_t pos, color_t col, int w, int h);


// Función que pinta una imagen en la VGA.
// Solo pinta los puntos que no son de color alfa (en este caso, negro), que se quedan "transparentes".
void imagen_11x11(position_t pos, color_t img[11][2]);


// Mueve la náve automáticamente de derecha a izquierda o viceversa
// El procedimiento para mover la nave es:
//        borrar la nave de pantalla, calcular la nueva posición, pintar la nave
void mueve_barra(int dir);

// Inicializa una bala en la posición X
void init_bola();

// Mueve la bala, en vertical, hasta y = 0. Cuando llega ahí la desactiva
void mueve_bola();

void init_botones();

int espera_boton();

int equals_color(color_t color1, color_t color2);

side_t calculate_border(position_t next_pos);
bool calculate_block(position_t next_pos, block_t *block);
movement_t calculate_rebound(bola_t bola, side_t side, bool is_block, block_t *block, position_t *next_pos);


#endif
