#include <stdio.h>
#include "colors.h"
#include "bar.h"

const color_t gold = G;		// Bar color
const color_t empty = N;	// Background

side_t which_side_bar(position_t next_pos, position_t *bar_pos)
{
	bool is_left = false, is_right = false, is_top = false;
	side_t res;

	if (next_pos.x >= bar_pos->x && next_pos.x < bar_pos->x + BAR_LENGTH &&
		next_pos.y == bar_pos->y)
		is_top = true;
	if (next_pos.x == bar_pos->x && next_pos.y >= bar_pos->y &&
		next_pos.y < bar_pos->y + BAR_HEIGHT)
		is_left = true;
	if (next_pos.x == bar_pos->x + BAR_LENGTH - 1 && next_pos.y >= bar_pos->y &&
		next_pos.y < bar_pos->y + BAR_HEIGHT)
		is_right = true;

	if (is_left)
		if (is_top)
			res = top_left; // top left corner
		else
			res = left; // left side
	else if (is_right)
		if (is_top)
			res = top_right; // top right corner
		else
			res = right; // right side
	else if (is_top)
		res = top; // top side

	return res;
}

void move_bar(bar_direction_t dir, position_t *bar_pos)
{
	int var;

	if (dir == bar_dir_left)
		var = -1;
	else if (dir == bar_dir_right)
		var = 1;
	else
		var = bar_no_dir;

	if (bar_pos->x + var > INT_X_BORDER && bar_pos->x + var <= END_X_BORDER - BAR_LENGTH)
	{
		rect(*bar_pos, empty, BAR_LENGTH, BAR_HEIGHT);
		bar_pos->x = bar_pos->x + var;
		rect(*bar_pos, gold, BAR_LENGTH, BAR_HEIGHT);
	}
}

void reset_bar_position(position_t *bar_pos)
{
	rect(*bar_pos, empty, BAR_LENGTH, BAR_HEIGHT);
	bar_pos->x = ((RESOLUTION_X / 2) - BAR_LENGTH / 2);
	rect(*bar_pos, gold, BAR_LENGTH, BAR_HEIGHT);
}
