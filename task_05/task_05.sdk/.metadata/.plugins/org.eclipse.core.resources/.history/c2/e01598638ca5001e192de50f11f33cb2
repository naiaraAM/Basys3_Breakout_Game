#include <stdio.h>
#include <sleep.h>
#include "mb_interface.h"
#include "timer.h"

// Global variables
int tiempo = 0;

int main() {
	init_timer();

	int data;
	int led = MAX_LED;							// Posicion del LED en binario
	volatile int *gpio0 = (int*)BASE_GPIO0;
	volatile int *gpio1 = (int*)BASE_GPIO1;

	gpio1[1] = 0;								// Configurarlo como salida
	gpio0[1] = MASK_BUTTONS; 					// Configurar 4 bits como entrada

	while(1) {
		gpio1[0] = led;

		while((data = gpio0[0] & MASK_BUTTONS) == 0); 				// Espera a que se pulse un boton.
																	// &0xf para quedarnos solo con 4 bits (4 botones)

		if ((data & 0x2) != 0) {									// Botón de mover a la izquierda
			if (led < MAX_LED)
				led <<= 1;
			print_button('i');
		}
		else if ((data & 0x4) != 0) {								// Botón de mover a la derecha
			if (led > 1)
				led >>= 1;
			print_button('d');
		}
		else if ((data & 0x1) != 0) {								// Botón de ir al principio (izquierda)
			led = MAX_LED;
			print_button('p');
		}
		else if ((data & 0x8) != 0) {								// Botón de ir al final (derecha)
			led = 0x1;
			print_button('f');
		}
		while((gpio0[0] & MASK_BUTTONS) != 0) msleep(5000);			// Espera a que se levante un botón, usleep sustituido por msleep
	}
}

/**
 * @brief Sleep miliseconds.
 * @param milisegundos time in ms to sleep
 */
void msleep(int milisegundos) {
	int temp = tiempo;
	while (tiempo != milisegundos + temp);
}

/**
 * @brief Timer initialization.
 */
void init_timer() {
	TLR0 = RST_VALUE;
	TCSR0 = 0x20; // Timer Load and Clear any Pending Ints
	TCSR0 = 0xD2; // Timer Clear Load Bit

	// Enable Timer Interrupt in IntC
	INTC_IER = TIMER_INT;

	// Int Controller Master Enable
	INTC_MER = 0x03;
	microblaze_enable_interrupts();
}

/**
 * @brief Interrupt Service Routine.
 */
void myISR()
{
	if (INTC_IPR & TIMER_INT)
		timer_ISR();
}

/**
 * @brief Interrupt Service Routine for the timer.
 */
void timer_ISR()
{
	tiempo++;
	// Acknowledge Interrupt In Timer (Clear pending bit)
	TCSR0 = TCSR0 | 0x100;
}
