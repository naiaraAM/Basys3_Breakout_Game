#include <stdio.h>
#include <stdlib.h>
#include "blocks.h"
#include "graphics.h"
#include "peripherals/timer.h"

const color_t blaaaack = N;	  	// Background
const color_t map_colors[N_BLOCKS_Y] = {M_RED, M_ORANGE, M_YELLOW, M_GREEN, M_DBLUE, M_PURPLE, M_CYAN};

void print_block(position_t pos, color_t col)
{
    for (int i = 0; i < BLOCK_LENGTH; i++)
        for (int j = 0; j < BLOCK_HEIGHT; j++)
            paint(pos.x + i, pos.y + j, col);
}

void reprint_block(block_t *block)
{
    block->color.r -= BLOCK_COLOR_DIFF;
    block->color.g -= BLOCK_COLOR_DIFF;
    block->color.b -= BLOCK_COLOR_DIFF;

    print_block(block->location, block->color);
}

void init_map(map_t *map, levels_t level)
{
    int collisions = 1, destructibles = N_BLOCKS_X * N_BLOCKS_Y;
    color_t indest_color = M_DGREY;

    // Set random seed as the current number of clock cycles since the program started.
    // See timer.h for further information.
    srand(get_cycles());

    for (int i = 0; i < N_BLOCKS_Y; i++)
    {
        for (int j = 0; j < N_BLOCKS_X; j++)
        {
            // Set block default color
            map->blocks[j][i].color = blaaaack;

            // Decide if the block could be indestructible depending on the level
            if (level == third_lvl)
            {
                map->blocks[j][i].indestructible = (rand() % 4 == 0) ? true : false; // approx. 25% of indestructible blocks
            }
            else
                map->blocks[j][i].indestructible = false;

            // Decide the number of collisions of each block depending on the level
			if (map->blocks[j][i].indestructible)
			{
				map->blocks[j][i].collisions = 0;
				map->blocks[j][i].color = indest_color;
				destructibles--;
			}/*
			else if (level == second_lvl || level == third_lvl)
            {
                collisions = (rand() % 10 < 7) ? 1 : (rand() % 10 < 9) ? 2 : 3; // 70% chance for 1, 15% chance for 2, 15% chance for 3
                // Calculate the color of the block depending on the number of collisions. The more collisions, the darker the color.
                map->blocks[j][i].color.r = map_colors[i].r + (collisions - 1) * BLOCK_COLOR_DIFF;
                map->blocks[j][i].color.g = map_colors[i].g + (collisions - 1) * BLOCK_COLOR_DIFF;
                map->blocks[j][i].color.b = map_colors[i].b + (collisions - 1) * BLOCK_COLOR_DIFF;
            }*/

            // Update the block properties
            map->blocks[j][i].collisions = collisions;
            map->blocks[j][i].i = i;
            map->blocks[j][i].j = j;
        }
    }
    // Update the count of destructible blocks
    map->destructible = destructibles;
}

void print_map(block_t blocks[N_BLOCKS_X][N_BLOCKS_Y])
{
    position_t pos;

    // Calculate the position of the blocks and print them
    for (int i = 0; i < N_BLOCKS_Y; i++)
    {
        pos.x = BLOCK_SEPARATION + 2;
        pos.y = BLOCK_SEPARATION + i * (BLOCK_HEIGHT + BLOCK_SEPARATION) + 2;

        for (int j = 0; j < N_BLOCKS_X; j++)
        {
            pos.x = BLOCK_SEPARATION + j * (BLOCK_LENGTH + BLOCK_SEPARATION) + 2;
            blocks[j][i].location.x = pos.x;
            blocks[j][i].location.y = pos.y;
            print_block(pos, blocks[j][i].color);
        }
    }
}

bool calculate_block(position_t next_pos, block_t **block, map_t *map)
{
	for (int i = N_BLOCKS_Y - 1; i >= 0; i--)
	{
		for (int j = N_BLOCKS_X - 1; j >= 0; j--)
		{
			block_t *res = &map->blocks[j][i];
			if (next_pos.x >= res->location.x && next_pos.x < res->location.x + BLOCK_LENGTH &&
				next_pos.y >= res->location.y && next_pos.y < res->location.y + BLOCK_HEIGHT) // inside block
			{
				*block = res;
				return true;
			}
		}
	}
	return false;
}
