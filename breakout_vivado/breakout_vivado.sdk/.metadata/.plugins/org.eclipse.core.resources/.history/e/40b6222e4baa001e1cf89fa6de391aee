#include <stdio.h>
#include "ball.h"
#include "colors.h"

void init_ball(ball_t *ball, position_t *bar_pos)
{
	ball->x = bar_pos->x + BAR_LENGTH / 2;
	ball->y = bar_pos->y - 1;
	paint(ball->x, ball->y, light_blue);
}

game_status_t move_ball(ball_t *ball, position_t *bar_pos, map_t *map)
{
	game_status_t status = continues;
	position_t next_pos;
	side_t side;
	block_t **block_ptr = NULL;
	block_t *block;
	movement_t next_mov;
	bool is_block = false;
	color_t next_color;

	switch (ball->mov)
	{
	case mov_top_right:
		next_pos.x = ball->x + 1;
		next_pos.y = ball->y - 1;
		break;
	case mov_bottom_right:
		next_pos.x = ball->x + 1;
		next_pos.y = ball->y + 1;
		break;
	case mov_bottom_left:
		next_pos.x = ball->x - 1;
		next_pos.y = ball->y + 1;
		break;
	case mov_top_left:
		next_pos.x = ball->x - 1;
		next_pos.y = ball->y - 1;
		break;
	}
	next_color = get_color(next_pos.x, next_pos.y);
	if (!equals_color(black, next_color)) // not empty space
	{
		if ((side = calculate_border(next_pos)) == not_border) // block or bar side
		{
			if ((is_block = calculate_block(next_pos, block_ptr, map))) // block
			{
				block = *block_ptr;
				if (!block->indestructible)
				{
					block->collisions--;
					if (block->collisions == 0)
					{
						print_block(block->location, black);
						status = block_broken;
					}
					else
						reprint_block(block);
				}
			}
		}
		else if (side == bottom) // bottom of screen
		{
			paint(ball->x, ball->y, black);
			return lost_life;
		}
		else
			is_block = false;
		next_mov = calculate_rebound(ball, side, is_block, *block, &next_pos, bar_pos);
	}
	else // normal move
	{
		next_mov = ball->mov;
	}
	paint(ball->x, ball->y, black);
	ball->x = next_pos.x;
	ball->y = next_pos.y;
	ball->mov = next_mov;
	paint(ball->x, ball->y, light_blue);

	return status;
}

movement_t calculate_rebound(ball_t *ball, side_t side, bool is_block, block_t block, position_t *next_pos,
							 position_t *bar_pos)
{
	movement_t mov = ball->mov;
	if (side != not_border) // border
	{
		switch (side)
		{
		case top_left:
			mov = mov_bottom_right;
			next_pos->x = ball->x + 1;
			next_pos->y = ball->y + 1;
			break;
		case top_right:
			mov = mov_bottom_left;
			next_pos->x = ball->x - 1;
			next_pos->y = ball->y + 1;
			break;
		case top:
			if (ball->mov == mov_top_right)
			{
				mov = mov_bottom_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y + 1;
			}
			else
			{
				mov = mov_bottom_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y + 1;
			}
			break;
		case left:
			if (ball->mov == mov_top_left)
			{
				mov = mov_top_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y - 1;
			}
			else
			{
				mov = mov_bottom_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y + 1;
			}
			break;
		case right:
			if (ball->mov == mov_top_right)
			{
				mov = mov_top_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y - 1;
			}
			else
			{
				mov = mov_bottom_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y + 1;
			}
			break;
		default:
			break;
		}
	}
	else if (is_block) // block
	{
		switch (which_side_block(*next_pos, block))
		{
		case top_left:
			mov = mov_top_left;
			next_pos->x = ball->x - 1;
			next_pos->y = ball->y - 1;
			break;
		case top_right:
			mov = mov_top_right;
			next_pos->x = ball->x + 1;
			next_pos->y = ball->y - 1;
			break;
		case bottom_left:
			mov = mov_bottom_left;
			next_pos->x = ball->x - 1;
			next_pos->y = ball->y + 1;
			break;
		case bottom_right:
			mov = mov_bottom_right;
			next_pos->x = ball->x + 1;
			next_pos->y = ball->y + 1;
			break;
		case top:
			if (ball->mov == mov_bottom_right)
			{
				mov = mov_top_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y - 1;
			}
			else
			{
				mov = mov_top_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y - 1;
			}
			break;
		case bottom:
			if (ball->mov == mov_top_right)
			{
				mov = mov_bottom_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y + 1;
			}
			else
			{
				mov = mov_bottom_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y + 1;
			}
			break;
		case left:
			if (ball->mov == mov_bottom_right)
			{
				mov = mov_bottom_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y + 1;
			}
			else
			{
				mov = mov_top_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y - 1;
			}
			break;
		case right:
			if (ball->mov == mov_bottom_left)
			{
				mov = mov_top_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y - 1;
			}
			else
			{
				mov = mov_bottom_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y + 1;
			}
			break;
		default:
			break;
		}
	}
	else if (next_pos->y < END_Y_BORDER)
	{
		switch (which_side_bar(*next_pos, bar_pos))
		{
		case top_left:
			mov = mov_top_left;
			next_pos->x = ball->x - 1;
			next_pos->y = ball->y - 1;
			break;
		case top_right:
			mov = mov_top_right;
			next_pos->x = ball->x + 1;
			next_pos->y = ball->y - 1;
			break;
		case top:
			if (ball->mov == mov_bottom_right)
			{
				mov = mov_top_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y - 1;
			}
			else
			{
				mov = mov_top_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y - 1;
			}
			break;
		case left:
			if (ball->mov == mov_bottom_right)
			{
				mov = mov_bottom_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y + 1;
			}
			else
			{
				mov = mov_top_left;
				next_pos->x = ball->x - 1;
				next_pos->y = ball->y - 1;
			}
			break;
		case right:
			if (ball->mov == mov_bottom_left)
			{
				mov = mov_top_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y - 1;
			}
			else
			{
				mov = mov_bottom_right;
				next_pos->x = ball->x + 1;
				next_pos->y = ball->y + 1;
			}
			break;
		default:
			break;
		}
	}
	return mov;
}
