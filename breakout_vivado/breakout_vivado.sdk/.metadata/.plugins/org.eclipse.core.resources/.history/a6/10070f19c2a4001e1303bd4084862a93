#ifndef __BLOCKS_H__
#define __BLOCKS_H__

#include <stdbool.h>
#include "colors.h"

#define RESOLUTION_X	160
#define RESOLUTION_Y	120

// Map properties
#define N_BLOCKS_X      11
#define N_BLOCKS_Y      7

// Block properties
#define BLOCK_LENGTH        12    // by default, 12
#define BLOCK_HEIGHT        3
#define SEPARATION          2
#define BLOCK_COLOR_DIFF    0x3C  // decimal: 60

// Technical parameters
#define MAX_COLLISIONS  3

/**
 * LEVEL DESCRIPTION:
 * Every level has a different map, and the same lives.
 * 1. Every block in the map can be broken with one hit.
 * 2. The same than lvl 1, but random blocks in the map will increase their collision requirements.
 * 3. The same than lvl 2, plus random indestructible blocks.
*/
typedef enum levels {first_lvl, second_lvl, third_lvl} levels_t;
/*
const color_t red = M_RED;
const color_t orange = M_ORANGE;
const color_t yellow = M_YELLOW;
const color_t green = M_GREEN;
const color_t dark_blue = M_DBLUE;
const color_t purple = M_PURPLE;
const color_t cyan = M_CYAN;
*/

typedef struct position {
	int x, y;
} position_t;

// The block structure defines its current properties
typedef struct block {
	color_t color;
    int collisions;
    int i, j;
    position_t location;
    bool indestructible;
} block_t;
typedef struct map {
	block_t blocks[N_BLOCKS_X][N_BLOCKS_Y];
    int destructible;	// number of destructible blocks
} map_t;

// Block/Map printing functions
void print_block(position_t pos, color_t col);
void init_map(map_t map, levels_t level);
void print_map(block_t blocks[N_BLOCKS_X][N_BLOCKS_Y]);
void reprint_block(block_t block);

#endif
