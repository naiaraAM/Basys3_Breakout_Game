#ifndef __BLOCKS_H__
#define __BLOCKS_H__

// Map properties
#define N_BLOCKS_X      15
#define N_BLOCKS_Y      7

// Block properties
#define BLOCK_LENGTH    (int)(RESOLUTION_X / N_BLOCKS_X)    // by default, 10
#define BLOCK_HEIGHT    3
#define SEPARATION      1

// Technical parameters
#define MAX_COLLISIONS  3

// Available colors exclusive for the map
#define M_RED       {0xee, 0x48, 0x4c}
#define M_ORANGE    {0xde, 0x6a, 0x35}
#define M_YELLOW    {0xf3, 0xc0, 0x01}
#define M_GREEN     {0x53, 0xbe, 0x42}
#define M_DBLUE     {0x3f, 0x41, 0xfd}
#define M_PURPLE    {0x87, 0x48, 0xf1}
#define M_CYAN      {0x02, 0xf3, 0xf3}

static const struct color red = M_RED;
static const struct color orange = M_ORANGE;
static const struct color yellow = M_YELLOW;
static const struct color green = M_GREEN;
static const struct color dark_blue = M_DBLUE;
static const struct color purple = M_PURPLE;
static const struct color cyan = M_CYAN;

static const struct color map_colors[] = {red, orange, yellow, green, dark_blue, purple, cyan};

// The block structure defines its current properties
struct block {
	struct color color;
    int collisions;
};

// By default, a map of 20 Ã— 10
static block map[N_BLOCKS_X][N_BLOCKS_Y];

// Block/Map printing functions
static void print_block(struct position pos, struct color col);
static void init_map(block map[N_BLOCKS_X][N_BLOCKS_Y]);
void print_map(block map[N_BLOCKS_X][N_BLOCKS_Y]);

#endif
